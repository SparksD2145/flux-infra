---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: k8s-dashboard
  namespace: kube-system
spec:
  interval: 15m
  chart:
    spec:
      chart: kubernetes-dashboard
      version: 7.10.1
      sourceRef:
        kind: HelmRepository
        name: kubernetes-dashboard-charts
        namespace: flux-system
      interval: 15m
  values:
    # General configuration shared across resources
    app:
      # Common priority class used for all deployed resources
      priorityClassName: null
      settings:
        ## Global dashboard settings
        global:
        #  # Cluster name that appears in the browser window title if it is set
        #  clusterName: ""
        #  # Max number of items that can be displayed on each list page
        #  itemsPerPage: 10
        #  # Number of seconds between every auto-refresh of logs
        #  logsAutoRefreshTimeInterval: 5
        #  # Number of seconds between every auto-refresh of every resource. Set 0 to disable
        #  resourceAutoRefreshTimeInterval: 5
        #  # Hide all access denied warnings in the notification panel
        #  disableAccessDeniedNotifications: false
        ## Pinned resources that will be displayed in dashboard's menu
        pinnedResources: []
        # - kind: customresourcedefinition
        #  #  Fully qualified name of a CRD
        #  name: prometheus.monitoring.coreos.com
        #  #  Display name
        #  displayName: Prometheus
        #  #  Is this CRD namespaced?
        #  namespaced: true
      ingress:
        enabled: true
        hosts:
          - k8s-dashboard.sparks.codes
        ingressClassName: nginx-internal
        # Use only if your ingress controllers support default ingress classes.
        # If set to true ingressClassName will be ignored and not added to the Ingress resources.
        # It should fall back to using IngressClass marked as the default.
        useDefaultIngressClass: false
        # This will append our Ingress with annotations required by our default configuration.
        #    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
        #    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
        #    nginx.ingress.kubernetes.io/ssl-redirect: "true"
        useDefaultAnnotations: true
        pathType: ImplementationSpecific
        # If path is not the default (/), rewrite-target annotation will be added to the Ingress.
        # It allows serving Kubernetes Dashboard on a sub-path. Make sure that the configured path
        # does not conflict with gateway route configuration.
        path: /
        issuer:
          name: selfsigned
          # Scope determines what kind of issuer annotation will be used on ingress resource
          # - default - adds 'cert-manager.io/issuer'
          # - cluster - adds 'cert-manager.io/cluster-issuer'
          # - disabled - disables cert-manager annotations
          scope: default
        tls:
          enabled: true
          secretName: acme-crt-secret-sparks-codes
        labels: {}
        annotations:
          hajimari.io/enable: "true"
          hajimari.io/appName: "K8s Dashboard"
          hajimari.io/info: "Kubernetes system information"
          hajimari.io/icon: "kubernetes"
          kubernetes.io/ingress.class: "nginx-internal"

      # Use the following toleration if Dashboard can be deployed on a tainted control-plane nodes
      # - key: node-role.kubernetes.io/control-plane
      #   effect: NoSchedule
      tolerations: []
      affinity: {}

    auth:
      role: auth
      image:
        repository: docker.io/kubernetesui/dashboard-auth
        tag: 1.2.2
      scaling:
        replicas: 1
        revisionHistoryLimit: 10
      containers:
        ports:
          - name: auth
            containerPort: 8000
            protocol: TCP
        args: []
        env: []
        volumeMounts:
          - mountPath: /tmp
            name: tmp-volume
        # TODO: Validate configuration
        resources:
          requests:
            cpu: 100m
            memory: 200Mi
          limits:
            cpu: 250m
            memory: 400Mi
      automountServiceAccountToken: true
      volumes:
        # Create on-disk volume to store exec logs (required)
        - name: tmp-volume
          emptyDir: {}
      nodeSelector: {}
      # Labels & annotations shared between API related resources
      labels: {}
      annotations: {}

    # API deployment configuration
    api:
      role: api
      image:
        repository: docker.io/kubernetesui/dashboard-api
        tag: 1.10.1
      scaling:
        replicas: 1
        revisionHistoryLimit: 10
      containers:
        ports:
          - name: api
            containerPort: 8000
            protocol: TCP
        # Additional container arguments
        # Full list of arguments: https://github.com/kubernetes/dashboard/blob/master/docs/common/arguments.md
        # args:
        # - --system-banner="Welcome to the Kubernetes Dashboard"
        args: []
        # Additional container environment variables
        # env:
        # - name: SOME_VAR
        #   value: 'some value'
        env: []
        # Additional volume mounts
        # - mountPath: /kubeconfig
        #   name: dashboard-kubeconfig
        #   readOnly: true
        volumeMounts:
          # Create volume mount to store exec logs (required)
          - mountPath: /tmp
            name: tmp-volume
        # TODO: Validate configuration
        resources:
          requests:
            cpu: 100m
            memory: 200Mi
          limits:
            cpu: 250m
            memory: 400Mi
      automountServiceAccountToken: true
      # Additional volumes
      # - name: dashboard-kubeconfig
      #   secret:
      #     defaultMode: 420
      #     secretName: dashboard-kubeconfig
      volumes:
        # Create on-disk volume to store exec logs (required)
        - name: tmp-volume
          emptyDir: {}
      nodeSelector: {}
      # Labels & annotations shared between API related resources
      labels: {}
      annotations: {}

    # WEB UI deployment configuration
    web:
      role: web
      image:
        repository: docker.io/kubernetesui/dashboard-web
        tag: 1.6.0
      scaling:
        replicas: 1
        revisionHistoryLimit: 10
      containers:
        ports:
          - name: web
            containerPort: 8000
            protocol: TCP
        # Additional container arguments
        # Full list of arguments: https://github.com/kubernetes/dashboard/blob/master/docs/common/arguments.md
        # args:
        # - --system-banner="Welcome to the Kubernetes Dashboard"
        args: []
        # Additional container environment variables
        # env:
        # - name: SOME_VAR
        #   value: 'some value'
        env: []
        # Additional volume mounts
        # - mountPath: /kubeconfig
        #   name: dashboard-kubeconfig
        #   readOnly: true
        volumeMounts:
          # Create volume mount to store logs (required)
          - mountPath: /tmp
            name: tmp-volume
        # TODO: Validate configuration
        resources:
          requests:
            cpu: 100m
            memory: 200Mi
          limits:
            cpu: 250m
            memory: 400Mi
      automountServiceAccountToken: true
      # Additional volumes
      # - name: dashboard-kubeconfig
      #   secret:
      #     defaultMode: 420
      #     secretName: dashboard-kubeconfig
      volumes:
        # Create on-disk volume to store exec logs (required)
        - name: tmp-volume
          emptyDir: {}
      nodeSelector: {}
      # Labels & annotations shared between WEB UI related resources
      labels: {}
      annotations: {}

    ### Metrics Scraper
    ### Container to scrape, store, and retrieve a window of time from the Metrics Server.
    ### refs: https://github.com/kubernetes/dashboard/tree/master/modules/metrics-scraper
    metricsScraper:
      enabled: true
      role: metrics-scraper
      image:
        repository: docker.io/kubernetesui/dashboard-metrics-scraper
        tag: 1.2.1
      scaling:
        replicas: 1
        revisionHistoryLimit: 10
      containers:
        ports:
          - containerPort: 8000
            protocol: TCP
        args: []
        # Additional container environment variables
        # env:
        # - name: SOME_VAR
        #   value: 'some value'
        env: []
        # Additional volume mounts
        # - mountPath: /kubeconfig
        #   name: dashboard-kubeconfig
        #   readOnly: true
        volumeMounts:
          # Create volume mount to store logs (required)
          - mountPath: /tmp
            name: tmp-volume
        # TODO: Validate configuration
        resources:
          requests:
            cpu: 100m
            memory: 200Mi
          limits:
            cpu: 250m
            memory: 400Mi
        livenessProbe:
          httpGet:
            scheme: HTTP
            path: /
            port: 8000
          initialDelaySeconds: 30
          timeoutSeconds: 30
      automountServiceAccountToken: true
      # Additional volumes
      # - name: dashboard-kubeconfig
      #   secret:
      #     defaultMode: 420
      #     secretName: dashboard-kubeconfig
      volumes:
        - name: tmp-volume
          emptyDir: {}
      nodeSelector: {}
      # Labels & annotations shared between WEB UI related resources
      labels: {}
      annotations: {}

    ## Optional Metrics Server sub-chart configuration
    ## Enable this if you don't already have metrics-server enabled on your cluster and
    ## want to use it with dashboard metrics-scraper
    ## refs:
    ##  - https://github.com/kubernetes-sigs/metrics-server
    ##  - https://github.com/kubernetes-sigs/metrics-server/tree/master/charts/metrics-server
    metrics-server:
      enabled: false
      args:
        - --kubelet-preferred-address-types=InternalIP
        - --kubelet-insecure-tls

    ## Required Kong sub-chart with DBless configuration to act as a gateway
    ## for our all containers.
    kong:
      enabled: true
      ## Configuration reference: https://docs.konghq.com/gateway/3.6.x/reference/configuration
      env:
        dns_order: LAST,A,CNAME,AAAA,SRV
        plugins: "off"
        nginx_worker_processes: 1
      ingressController:
        enabled: false
      dblessConfig:
        configMap: kong-dbless-config
      proxy:
        type: ClusterIP
        http:
          enabled: false

    ## Optional Cert Manager sub-chart configuration
    ## Enable this if you don't already have cert-manager enabled on your cluster.
    cert-manager:
      enabled: false
      installCRDs: false

    ## Optional Nginx Ingress sub-chart configuration
    ## Enable this if you don't already have nginx-ingress enabled on your cluster.
    nginx:
      enabled: false
      controller:
        electionID: ingress-controller-leader
        ingressClassResource:
          name: internal-nginx
          default: false
          controllerValue: k8s.io/internal-ingress-nginx
        service:
          type: ClusterIP

    ## Extra configurations:
    ## - manifests
    ## - predefined roles
    ## - prometheus
    ## - etc...
    extras:
      # Extra Kubernetes manifests to be deployed
      # manifests:
      # - apiVersion: v1
      #   kind: ConfigMap
      #   metadata:
      #     name: additional-configmap
      #   data:
      #     mykey: myvalue
      manifests: []
      serviceMonitor:
        # Whether to create a Prometheus Operator service monitor.
        enabled: false
        # Here labels can be added to the serviceMonitor
        labels: {}
        # Here annotations can be added to the serviceMonitor
        annotations: {}
        # metrics.serviceMonitor.metricRelabelings Specify Metric Relabelings to add to the scrape endpoint
        # ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#relabelconfig
        metricRelabelings: []
        # metrics.serviceMonitor.relabelings [array] Prometheus relabeling rules
        relabelings: []
        # ServiceMonitor connection scheme. Defaults to HTTPS.
        scheme: https
        # ServiceMonitor connection tlsConfig. Defaults to {insecureSkipVerify:true}.
        tlsConfig:
          insecureSkipVerify: true
